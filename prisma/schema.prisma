// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  username String @unique
  password String
  role     Int    @default(1)
  created_at DateTime @default(now())

  school School?
  team Team?

  messages_authored Message[] @relation(name: "AuthorRelation")
  messages_received Message[] @relation(name: "RecipientRelation")
}

model School {
  id            String @id @default(uuid())
  name          String
  address       String
  contact_email String
  contact_name  String
  teams         Team[]
  created_at    DateTime @default(now())
  user_id       String @unique
  user          User   @relation(fields: [user_id], references: [id])
}

model TeamMember {
  id     String @id @default(uuid())
  name   String
  grade  Int
  substitute Boolean
  team_id String
  team    Team   @relation(fields: [team_id], references: [id])
  created_at DateTime @default(now())
}

model Category {
  id   String @id @default(uuid())
  name String
  task String @db.VarChar(5000) @default("")
  valid_from DateTime
  valid_until DateTime
  created_at DateTime @default(now())

  teams Team[]
  programmingLanguages ProgrammingLanguage[]
}

model ProgrammingLanguage {
  id   String @id @default(uuid())
  name String
  created_at DateTime @default(now())
  caregory_id String
  category Category @relation(fields: [caregory_id], references: [id])
  teams Team[]
}

model Team {
  id        String @id @default(uuid())
  name      String
  school_id String
  school    School @relation(fields: [school_id], references: [id])
  teachers  String
  members   TeamMember[]
  category_id String
  category Category @relation(fields: [category_id], references: [id])
  programming_language_id String
  programming_language ProgrammingLanguage @relation(fields: [programming_language_id], references: [id])
  created_at DateTime @default(now())
  approved Boolean @default(false)
  approved_by_school Boolean @default(false)
  user_id String @unique
  user User @relation(fields: [user_id], references: [id])
}

model Message {
  id        String @id @default(uuid())
  message   String
  author_id String
  author    User @relation(fields: [author_id], references: [id], name: "AuthorRelation")
  recipient_id String
  recipient    User @relation(fields: [recipient_id], references: [id], name: "RecipientRelation")
  created_at DateTime @default(now())
}